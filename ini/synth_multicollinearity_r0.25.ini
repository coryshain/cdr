[data]
X_train = ../data/synth/cognition/multicollinearity/data/k20_gShiftedGamma/m10000_n10000_xexponential-0.1_yexponential-0.1_r0.2500_e10.0000_a_train/X.evmeasures
X_dev = ../data/synth/cognition/multicollinearity/data/k20_gShiftedGamma/m10000_n10000_xexponential-0.1_yexponential-0.1_r0.2500_e10.0000_a_test/X.evmeasures
y_train = ../data/synth/cognition/multicollinearity/data/k20_gShiftedGamma/m10000_n10000_xexponential-0.1_yexponential-0.1_r0.2500_e10.0000_a_train/y.evmeasures
y_dev = ../data/synth/cognition/multicollinearity/data/k20_gShiftedGamma/m10000_n10000_xexponential-0.1_yexponential-0.1_r0.2500_e10.0000_a_test/y.evmeasures
series_ids = subject docid
history_length = 128

[global_settings]
outdir = ../results/cdrnn_journal/synth_multicollinearity_r0.25

[cdr_settings]
eval_freq = 10

generate_irf_surface_plots = False
generate_nonstationarity_surface_plots = False
generate_curvature_plots = False
plot_legend = False
plot_step_default = sd

[model_CDR_main]
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_rep2]
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_rep3]
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_rep4]
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_rep5]
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_rec]
n_units_rnn = inherit
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_u16]
n_units = 16
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_u64]
n_units = 64
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_l1]
n_layers = 1
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_l3]
n_layers = 3
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_r1]
nn_regularizer_scale = 01
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_r25]
nn_regularizer_scale = 25
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_d0.05]
dropout_rate = 0.05
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_d0.2]
dropout_rate = 0.2
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_lr0.001]
learning_rate = 0.001
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_lr0.009]
learning_rate = 0.009
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_b512]
minibatch_size = 512
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())

[model_CDR_b2048]
minibatch_size = 2048
formula = y ~ C(rate + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t, NN())
