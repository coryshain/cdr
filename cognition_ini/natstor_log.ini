[data]
X_train = ../data/SPR_ns/natstor_X.csv
X_dev = ../data/SPR_ns/natstor_X.csv
X_test = ../data/SPR_ns/natstor_X.csv
y_train = ../data/SPR_ns/natstor_y_train.csv
y_dev = ../data/SPR_ns/natstor_y_dev.csv
y_test = ../data/SPR_ns/natstor_y_test.csv
series_ids = subject docid
split_ids = subject sentid
modulus = 4
history_length = 256
filters = fdur > 100; fdur < 3000; correct > 4; startofsentence != 1; endofsentence != 1; subjectnunique > 100

[global_settings]
outdir = ../results/cognition/reading/natstor_log

[cdr_settings]
n_iter = 100000
log_freq = 10
save_freq = 100
learning_rate = 0.001
constraint = softplus

[irf_name_map]
DiracDelta.s(trial)-Terminal.s(trial) = Document position
DiracDelta.s(sentpos)-Terminal.s(sentpos) = Sentence position
Exp.rate-Terminal.rate = Rate
Exp.s(wdelta)-Terminal.s(wdelta) = Saccade length
Exp.s(wlen)-Terminal.s(wlen) = Word length
Exp.s(unigramsurp)-Terminal.s(unigramsurp) = Unigram surprisal
Exp.s(fwprob5surp)-Terminal.s(fwprob5surp) = 5-gram surprisal
Normal.rate-Terminal.rate = Rate
Normal.s(wdelta)-Terminal.s(wdelta) = Saccade length
Normal.s(wlen)-Terminal.s(wlen) = Word length
Normal.s(unigramsurp)-Terminal.s(unigramsurp) = Unigram surprisal
Normal.s(fwprob5surp)-Terminal.s(fwprob5surp) = 5-gram surprisal
ShiftedGammaShapeGT1.rate-Terminal.rate = Rate
ShiftedGammaShapeGT1.s(wdelta)-Terminal.s(wdelta) = Saccade length
ShiftedGammaShapeGT1.s(wlen)-Terminal.s(wlen) = Word length
ShiftedGammaShapeGT1.s(unigramsurp)-Terminal.s(unigramsurp) = Unigram surprisal
ShiftedGammaShapeGT1.s(fwprob5surp)-Terminal.s(fwprob5surp) = 5-gram surprisal
G.rate-Terminal.rate = Rate
G.s(wdelta)-Terminal.s(wdelta) = Saccade length
G.s(wlen)-Terminal.s(wlen) = Word length
G.s(unigramsurp)-Terminal.s(unigramsurp) = Unigram surprisal
G.s(fwprob5surp)-Terminal.s(fwprob5surp) = 5-gram surprisal
So2b100p2.rate-Terminal.rate = Rate
So2b100p2.s(wdelta)-Terminal.s(wdelta) = Saccade length
So2b100p2.s(wlen)-Terminal.s(wlen) = Word length
So2b100p2.s(unigramsurp)-Terminal.s(unigramsurp) = Unigram surprisal
So2b100p2.s(fwprob5surp)-Terminal.s(fwprob5surp) = 5-gram surprisal

# Exponential IRF kernel
[model_CDR_E_mle]
network_type = mle
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp(ran=T)) | subject)

[model_CDR_E_improper]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = False
n_samples = 1
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp(ran=T)) | subject)

[model_CDR_E_bbvi]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = True
n_samples = 1
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp(ran=T)) | subject)

# Normal IRF kernel
[model_CDR_N_mle]
network_type = mle
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal(ran=T)) | subject)

[model_CDR_N_improper]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = False
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
n_samples = 1
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal(ran=T)) | subject)

[model_CDR_N_bbvi]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = True
n_samples = 1
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal(ran=T)) | subject)

# ShiftedGamma IRF kernel
[model_CDR_G_mle]
network_type = mle
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1(ran=T)) | subject)

[model_CDR_G_improper]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = False
n_samples = 1
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1(ran=T)) | subject)

[model_CDR_G_bbvi]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = True
n_samples = 1
ablate = unigramsurp fwprob5surp
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1(ran=T)) | subject)

# Linear combination of Gaussians (LCG) kernel)
[model_CDR_LCG_mle]
network_type = mle
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G(ran=T)) | subject)

[model_CDR_LCG_improper]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = False
n_samples = 1
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G(ran=T)) | subject)

[model_CDR_LCG_bbvi]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = True
n_samples = 1
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G(ran=T)) | subject)

# SinhArcsinh Models

# Exponential IRF kernel
[model_CDR_asym_E_mle]
network_type = mle
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp(ran=T)) | subject)

[model_CDR_asym_E_improper]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = False
n_samples = 1
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp(ran=T)) | subject)

[model_CDR_asym_E_bbvi]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = True
n_samples = 1
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Exp(ran=T)) | subject)

# Normal IRF kernel
[model_CDR_asym_N_mle]
network_type = mle
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal(ran=T)) | subject)

[model_CDR_asym_N_improper]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = False
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
n_samples = 1
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal(ran=T)) | subject)

[model_CDR_asym_N_bbvi]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = True
n_samples = 1
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), Normal(ran=T)) | subject)

# ShiftedGamma IRF kernel
[model_CDR_asym_G_mle]
network_type = mle
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1(ran=T)) | subject)

[model_CDR_asym_G_improper]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = False
n_samples = 1
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1(ran=T)) | subject)

[model_CDR_asym_G_bbvi]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = True
n_samples = 1
ablate = unigramsurp fwprob5surp
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), ShiftedGammaShapeGT1(ran=T)) | subject)

# Linear combination of Gaussians (LCG) kernel)
[model_CDR_asym_LCG_mle]
network_type = mle
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G(ran=T)) | subject)

[model_CDR_asym_LCG_improper]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = False
n_samples = 1
ranef_regularizer_name = l2_regularizer
ranef_regularizer_scale = 1.
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G(ran=T)) | subject)

[model_CDR_asym_LCG_bbvi]
network_type = bayes
irf_param_prior_sd = 1
posterior_to_prior_sd_ratio = 1e-2
ranef_to_fixef_prior_sd_ratio = 1e-1
declare_priors = True
n_samples = 1
asymmetric_error = True
formula = log(fdur) ~ s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G()) + (s(trial) + s(sentpos) + C(rate + s(wlen) + s(unigramsurp) + s(fwprob5surp), G(ran=T)) | subject)


# Baselines
[model_LMEnoS]
formula = log(fdur) ~ z.(trial) + z.(sentpos) + z.(wlen) + z.(unigramsurp) + z.(fwprob5surp) + (1 + z.(trial) + z.(sentpos) + z.(wlen) + z.(unigramsurp) + z.(fwprob5surp) | subject)

[model_LMEfullS]
formula = log(fdur) ~ z.(trial) + z.(sentpos) + z.(wlen) + z.(wlenS1) + z.(wlenS2) + z.(wlenS3) + + z.(unigramsurp) + z.(unigramsurpS1) + z.(unigramsurpS2) + z.(unigramsurpS3) + z.(fwprob5surp) + z.(fwprob5surpS1) + z.(fwprob5surpS2) + z.(fwprob5surpS3) + (1 + z.(trial) + z.(sentpos) + z.(wlen) + z.(wlenS1) + z.(wlenS2) + z.(wlenS3) + z.(unigramsurp) + z.(unigramsurpS1) + z.(unigramsurpS2) + z.(unigramsurpS3) + z.(fwprob5surp) + z.(fwprob5surpS1) + z.(fwprob5surpS2) + z.(fwprob5surpS3) | subject)

[model_GAMnoS]
formula = log(fdur) ~ s(z_trial) + s(z_sentpos) + s(z_wlen) + s(z_unigramsurp) + s(z_fwprob5surp) + s(subject, bs="re") + s(z_trial, subject, bs="re") + s(z_sentpos, subject, bs="re") + s(z_wlen, subject, bs="re") + s(z_unigramsurp, subject, bs="re") + s(z_fwprob5surp, subject, bs="re")

[model_GAMfullS]
formula = log(fdur) ~ s(z_trial) + s(z_sentpos) + s(z_wlen) + s(z_wlenS1) + s(z_wlenS2) + s(z_wlenS3) + s(z_unigramsurp) + s(z_unigramsurpS1) + s(z_unigramsurpS2) + s(z_unigramsurpS3) + s(z_fwprob5surp) + s(z_fwprob5surpS1) + s(z_fwprob5surpS2) + s(z_fwprob5surpS3) + s(subject, bs="re") + s(z_trial, subject, bs="re") + s(z_sentpos, subject, bs="re") + s(z_wlen, subject, bs="re") + s(z_wlenS1, subject, bs="re") + s(z_wlenS2, subject, bs="re") + s(z_wlenS3, subject, bs="re") + s(z_unigramsurp, subject, bs="re") + s(z_unigramsurpS1, subject, bs="re") + s(z_unigramsurpS2, subject, bs="re") + s(z_unigramsurpS3, subject, bs="re") + s(z_fwprob5surp, subject, bs="re") + s(z_fwprob5surpS1, subject, bs="re") + s(z_fwprob5surpS2, subject, bs="re") + s(z_fwprob5surpS3, subject, bs="re")

